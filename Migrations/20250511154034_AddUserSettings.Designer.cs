// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WordMemoryApp.Data;

#nullable disable

namespace WordMemoryApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250511154034_AddUserSettings")]
    partial class AddUserSettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WordMemoryApp.Models.PasswordResetToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("WordMemoryApp.Models.QuestionAttempt", b =>
                {
                    b.Property<long>("AttemptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AttemptID"));

                    b.Property<DateTime>("AskedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<byte>("QuestionType")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WordID")
                        .HasColumnType("int");

                    b.HasKey("AttemptID");

                    b.HasIndex("UserID");

                    b.HasIndex("WordID");

                    b.ToTable("QuestionAttempts");
                });

            modelBuilder.Entity("WordMemoryApp.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WordMemoryApp.Models.UserSettings", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("NewWordTarget")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("WordMemoryApp.Models.UserWordProgress", b =>
                {
                    b.Property<int>("UserWordProgressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserWordProgressID"));

                    b.Property<byte>("CorrectStreak")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsLearned")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WordID")
                        .HasColumnType("int");

                    b.HasKey("UserWordProgressID");

                    b.HasIndex("WordID");

                    b.HasIndex("UserID", "WordID")
                        .IsUnique();

                    b.ToTable("UserWordProgresses");
                });

            modelBuilder.Entity("WordMemoryApp.Models.Word", b =>
                {
                    b.Property<int>("WordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WordID"));

                    b.Property<string>("EngWordName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TurWordName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WordID");

                    b.HasIndex("OwnerId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("WordMemoryApp.Models.WordSample", b =>
                {
                    b.Property<int>("WordSampleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WordSampleID"));

                    b.Property<string>("Samples")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WordID")
                        .HasColumnType("int");

                    b.HasKey("WordSampleID");

                    b.HasIndex("WordID");

                    b.ToTable("WordSamples");
                });

            modelBuilder.Entity("WordMemoryApp.Models.PasswordResetToken", b =>
                {
                    b.HasOne("WordMemoryApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WordMemoryApp.Models.QuestionAttempt", b =>
                {
                    b.HasOne("WordMemoryApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WordMemoryApp.Models.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("WordMemoryApp.Models.UserSettings", b =>
                {
                    b.HasOne("WordMemoryApp.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("WordMemoryApp.Models.UserSettings", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WordMemoryApp.Models.UserWordProgress", b =>
                {
                    b.HasOne("WordMemoryApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordMemoryApp.Models.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("WordMemoryApp.Models.Word", b =>
                {
                    b.HasOne("WordMemoryApp.Models.User", "Owner")
                        .WithMany("Words")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WordMemoryApp.Models.WordSample", b =>
                {
                    b.HasOne("WordMemoryApp.Models.Word", "Word")
                        .WithMany("Samples")
                        .HasForeignKey("WordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");
                });

            modelBuilder.Entity("WordMemoryApp.Models.User", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("WordMemoryApp.Models.Word", b =>
                {
                    b.Navigation("Samples");
                });
#pragma warning restore 612, 618
        }
    }
}
